<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angularjs on John Palgut</title>
    <link>//jwsonic.github.io/categories/angularjs/</link>
    <description>Recent content in Angularjs on John Palgut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Jan 2015 14:47:09 -0500</lastBuildDate>
    <atom:link href="//jwsonic.github.io/categories/angularjs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Austin Google Fiber</title>
      <link>//jwsonic.github.io/projects/fiber/</link>
      <pubDate>Thu, 01 Jan 2015 14:47:09 -0500</pubDate>
      
      <guid>//jwsonic.github.io/projects/fiber/</guid>
      <description>

&lt;h2 id=&#34;the-fiber-dream:c60e498790513456114e62949061e65e&#34;&gt;The Fiber dream&lt;/h2&gt;

&lt;p&gt;When my wife, Jesyka, told me she got a job at IBM in Austin, TX my first thought was: &lt;strong&gt;CONGRATUALTIONS!&lt;/strong&gt; My second thought was: &lt;strong&gt;My friends are going to be super jealous when I tell them I&amp;rsquo;m getting Google Fiber.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-fiber-reality:c60e498790513456114e62949061e65e&#34;&gt;The Fiber reality&lt;/h2&gt;

&lt;p&gt;After scouring apartment listings in Austin, and doing a bit of research, it became clear that there were a few problems with my Google Fiber dream:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Roll-out was only scheduled for specific areas of Austin&lt;/li&gt;
&lt;li&gt;None of the areas were a reasonable commute distance from Jesyka&amp;rsquo;s work&lt;/li&gt;
&lt;li&gt;New areas were being added slowly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google provides an excellent &lt;a href=&#34;https://fiber.google.com/cities/austin/apartments/&#34;&gt;map of Fiber listings&lt;/a&gt; in Austin but there was no way to actually tell how often the listings were updated, if at all. Not to be deterred, I decided to write a webapp to track new Fiber listings, as they were added.&lt;/p&gt;

&lt;h2 id=&#34;reverse-engineering-google-fiber-listings:c60e498790513456114e62949061e65e&#34;&gt;Reverse engineering Google Fiber listings&lt;/h2&gt;

&lt;p&gt;Using Chrome Developer Tools, I was able to check network traffic on the Google Fiber map and discovered that the data for all Fiber enabled apartments was being stored in a JSON file. This JSON file was used by Google to build the apartment map on page load.&lt;/p&gt;

&lt;p&gt;Rather than use &lt;a href=&#34;https://en.wikipedia.org/wiki/Inline_linking&#34;&gt;inline linking&lt;/a&gt; for my webapp, I wrote a Go tool to fetch, parse, and store apartment data in a separate database on &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;. This prevents page loads from my app causing additional traffic on Google servers. Heroku&amp;rsquo;s background job scheduler runs the tool a few times a day, to avoid the server stress mentioned earlier.&lt;/p&gt;

&lt;p&gt;For the front end of the webapp, I used AngularJS. The front end uses an AJAX request to query the Heroku back end for JSON apartment data. The apartment data is then loaded into a table, which lists important information such as the name of the apartment complex, address of the apartment, and time the listing was added. Using AngularJS&amp;rsquo; built-in data filtering, users can search for listings by apartment name or address.&lt;/p&gt;

&lt;h2 id=&#34;check-it-out:c60e498790513456114e62949061e65e&#34;&gt;Check it out&lt;/h2&gt;

&lt;p&gt;The Austin Fiber site is still up &lt;a href=&#34;https://austin-fiber.herokuapp.com/#/&#34;&gt;here&lt;/a&gt;. The code is also available on &lt;a href=&#34;https://github.com/Jwsonic/fiber&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Marie Antoinette&#39;s Gluten-Free Bake Shoppe</title>
      <link>//jwsonic.github.io/projects/maries/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>//jwsonic.github.io/projects/maries/</guid>
      <description>

&lt;h2 id=&#34;from-restaurant-to-manufacturer:0f908a3ed3ef8d9a531516dfad512d4d&#34;&gt;From restaurant to manufacturer&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve worked with Marie Antoinette&amp;rsquo;s Gluten-Free Bake Shoppe, as their Lead Developer, since the company was founded. In late 2014, the company decided to shift their business strategy. The owners closed their restaurant and chose to focus and grow their manufacturing and distribution business by selling directly to vendors instead.&lt;/p&gt;

&lt;h2 id=&#34;requirements:0f908a3ed3ef8d9a531516dfad512d4d&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;After working with the business owners, a designer, and speaking to product vendors, the following list of requirements for the new website was created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;display information about the bakery (contact, hours, etc)&lt;/li&gt;
&lt;li&gt;allow customers to browse and search the bakery menu&lt;/li&gt;
&lt;li&gt;allow customers to place online orders, which could be shipped or picked up&lt;/li&gt;
&lt;li&gt;create a separate menu and order placement system for vendors&lt;/li&gt;
&lt;li&gt;admin ability to edit menu items, create vendor invoices, and approve new vendor accounts&lt;/li&gt;
&lt;li&gt;quick development is preferable as the current site lacks functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;roll-your-own-or-use-a-prebuilt-solution:0f908a3ed3ef8d9a531516dfad512d4d&#34;&gt;Roll your own or use a prebuilt solution?&lt;/h2&gt;

&lt;p&gt;First I considered using an off the shelf solution. Creating a content management system and ordering system from the ground up is quite a bit of work. I did research into existing &amp;ldquo;shopping cart solutions&amp;rdquo; such as Shopify or Magneto. Unfortunately, none of the existing systems I could find were able to satisfy all of the requirements. To use an off the shelf solution, I would need to extend the code base with a plugin in the language &amp;ldquo;chosen solution&amp;rdquo; was written in. Rather than go down a rabbit hole of foreign application architecture, undocumented features, and learning a new language, I decided to rebuild the Marie&amp;rsquo;s site from scratch.&lt;/p&gt;

&lt;h2 id=&#34;front-end-structure:0f908a3ed3ef8d9a531516dfad512d4d&#34;&gt;Front end structure&lt;/h2&gt;

&lt;p&gt;The front end was built using AngularJS and Bootstrap 3. AngularJS&amp;rsquo;s strength lies in its two-way data binding as well as its large selection of third party libraries. Functionality, such as filtering a list of menu items based on a search, is fairly trivial to do in AngularJS. Coupling AngularJS with Bootstrap allowed me to rapidly set up, try out, and iterate different layouts with the designer. Bootstrap is designed to be customizable out of the box, so changing how everything looked was no problem.&lt;/p&gt;

&lt;h2 id=&#34;why-go:0f908a3ed3ef8d9a531516dfad512d4d&#34;&gt;Why Go?&lt;/h2&gt;

&lt;p&gt;For the back end I chose to use the &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; programming language. I had been using Go in my side projects for a while and I wanted to leverage Go&amp;rsquo;s strengths of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a robust standard library&lt;/li&gt;
&lt;li&gt;easy to deploy to a variety of platforms (I chose &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;excellent performance&lt;/li&gt;
&lt;li&gt;built in concurrency&lt;/li&gt;
&lt;li&gt;official library support for &lt;a href=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt; (our payment processor)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I chose to use the &lt;a href=&#34;http://martini.codegangsta.io/&#34;&gt;Martini&lt;/a&gt; web framework after hearing about in on the &lt;a href=&#34;https://changelog.com/117/&#34;&gt;Changelog Podcast&lt;/a&gt;. Martini has several upgrades the from the built-in Go web framework that the Marie&amp;rsquo;s site would rely on. These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;middleware support for simple HTTP request/response modifications&lt;/li&gt;
&lt;li&gt;improved routing controls, making REST API endpoints easy to write&lt;/li&gt;
&lt;li&gt;dependency injection make sure that you always have access to the correct objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also chose to use &lt;a href=&#34;https://github.com/jinzhu/gorm&#34;&gt;GORM&lt;/a&gt; to connect to the database. GORM allows you to declare normal Go structs that map directly to database tables. When you make a database query with GORM, it&amp;rsquo;s a series of methods that return an easy to use Go struct. Using an ORM library, over manual SQL queries, made sense for the Maries site as development speed was more important than raw performance.&lt;/p&gt;

&lt;h2 id=&#34;still-going-strong:0f908a3ed3ef8d9a531516dfad512d4d&#34;&gt;Still going strong&lt;/h2&gt;

&lt;p&gt;The Marie&amp;rsquo;s website is still up and running today with both vendors and regular customers making online orders! You can check it out &lt;a href=&#34;https://www.mariesglutenfree.com&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Common Ground</title>
      <link>//jwsonic.github.io/projects/commonground/</link>
      <pubDate>Fri, 25 Jul 2014 14:47:09 -0500</pubDate>
      
      <guid>//jwsonic.github.io/projects/commonground/</guid>
      <description>

&lt;h2 id=&#34;teacher-centric-lesson-planning:ab757769ebbb53ad30e94bbeb44946bb&#34;&gt;Teacher-centric lesson planning&lt;/h2&gt;

&lt;p&gt;Common Ground, a companion webapp to &lt;a href=&#34;//jwsonic.github.io/projects/inscribe/&#34;&gt;Inscribe&lt;/a&gt;, enabled teachers with Inscribe accounts to create lesson plans for their current courses. Teachers could also export lesson plans and collaborate with other teachers on shared lesson plans. Common Ground had the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;share login and user data with &lt;a href=&#34;//jwsonic.github.io/projects/inscribe/&#34;&gt;Inscribe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;allow teachers to create lesson plans for Inscribe courses&lt;/li&gt;
&lt;li&gt;populate lesson plans on a calendar&lt;/li&gt;
&lt;li&gt;ability to easily export lesson plans to a variety of formats&lt;/li&gt;
&lt;li&gt;enable sharing of lesson plans and editing by multiple teachers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;talking-to-inscribe:ab757769ebbb53ad30e94bbeb44946bb&#34;&gt;Talking to Inscribe&lt;/h2&gt;

&lt;p&gt;Although the back end for Common Ground was written in a different language than Inscribe (&lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt; and &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;, respectively) it was pretty easy to communicate over HTTPS between the two. When a user would login to Common Ground, the following process took place:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;login request sent to Common Ground&lt;/li&gt;
&lt;li&gt;Common Ground forwarded the login request to Inscribe over HTTPS&lt;/li&gt;
&lt;li&gt;Inscribe checked the user&amp;rsquo;s credentials and returned a &lt;a href=&#34;https://self-issued.info/docs/draft-ietf-oauth-json-web-token.html&#34;&gt;JSON Web Token&lt;/a&gt;(JWT)&lt;/li&gt;
&lt;li&gt;Common Ground sent the JWT back to the user to be stored client side&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Common Ground and Inscribe shared the same JWT secret key, which is used to determine the validity of JWT claims. Sharing the JWT secret key between the two back ends made it so Common Ground could validate claims for Inscribe JWTs, instead of checking with the Inscribe back end every time the user tried to do something.&lt;/p&gt;

&lt;h2 id=&#34;front-end-lessons-from-inscribe:ab757769ebbb53ad30e94bbeb44946bb&#34;&gt;Front end lessons from Inscribe&lt;/h2&gt;

&lt;p&gt;After the &lt;a href=&#34;//jwsonic.github.io/projects/inscribe/#figuring-out-the-front-end:0eab5b6ef5fc6b3a1fc2a55d8d118484&#34;&gt;lessons I learned from Inscribe&lt;/a&gt;, I immediately chose to use AngularJS for Common Ground&amp;rsquo;s front end. Using the same front end framework across both Inscribe and Common Ground had the added benefit of allowing me to reuse code across the two projects. This enabled the team to quickly get Common Ground up and running.&lt;/p&gt;

&lt;h2 id=&#34;iterate-early-iterate-often:ab757769ebbb53ad30e94bbeb44946bb&#34;&gt;Iterate early, iterate often&lt;/h2&gt;

&lt;p&gt;Today Common Ground is no longer in use. After extensive user testing, Pomegranate Lab determined that a different approach was needed to help teachers better connect with their students. This project later iterated into &lt;a href=&#34;//jwsonic.github.io/projects/playbook/&#34;&gt;The Playbook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When it was around, Common Ground looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//jwsonic.github.io/img/cg-combined.png&#34; alt=&#34;Inscribe Img&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inscribe</title>
      <link>//jwsonic.github.io/projects/inscribe/</link>
      <pubDate>Thu, 10 Oct 2013 14:47:09 -0500</pubDate>
      
      <guid>//jwsonic.github.io/projects/inscribe/</guid>
      <description>

&lt;h2 id=&#34;assignments-with-a-growth-mindset:0eab5b6ef5fc6b3a1fc2a55d8d118484&#34;&gt;Assignments with a Growth Mindset&lt;/h2&gt;

&lt;p&gt;Inscribe is the first webapp I worked on for &lt;a href=&#34;http://pomegranatelab.com/&#34;&gt;Pomegranate Lab&lt;/a&gt;. It&amp;rsquo;s purpose was to help teachers connect with their students by providing in-depth feedback about the student&amp;rsquo;s assignments, and additionally provide context around what the student could do to improve their grades. Inscribe had the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;teachers can create courses and manage which students are enrolled in their courses&lt;/li&gt;
&lt;li&gt;teachers can create assignments from scratch or based on an existing rubric&lt;/li&gt;
&lt;li&gt;students can complete assignments online&lt;/li&gt;
&lt;li&gt;teachers can grade submitted student assignments and provide detailed feedback on how they can improve&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;python-to-the-rescue:0eab5b6ef5fc6b3a1fc2a55d8d118484&#34;&gt;Python to the rescue&lt;/h2&gt;

&lt;p&gt;Because Inscribe was one of the first webapps I had ever worked on, I wanted to make sure I chose a language I was familiar with, in order to not slow down development. &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; is one of my favorite programming languages and is well equipped for web development, so it was a perfect fit.&lt;/p&gt;

&lt;p&gt;Being new to web development, I researched several different Python web frameworks before settling on &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt;. Flask is designed to be as unobtrusive to your development process as possible. The Flask core library gives basic functionality for a webapp, and extra functionality like user authentication or database connections can easily be implemented with plugins.&lt;/p&gt;

&lt;h2 id=&#34;hosting-with-heroku:0eab5b6ef5fc6b3a1fc2a55d8d118484&#34;&gt;Hosting with Heroku&lt;/h2&gt;

&lt;p&gt;I looked at several different possible hosting solutions for Inscribe and wound up settling on &lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku&lt;/a&gt; for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up was much easier than something like a VPS.&lt;/li&gt;
&lt;li&gt;Deployment was git based and I was already using git for version control.&lt;/li&gt;
&lt;li&gt;The development tier was free and would cover our initial business needs. The ability to automatically scale was there if we needed more resources.&lt;/li&gt;
&lt;li&gt;Heroku offered easy to use add-ons like databases, email services, logging, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In terms of a database I used &lt;a href=&#34;http://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, for which Heroku provided an excellent free tier. Since development speed was more of a concern than raw database performance, I chose to use the &lt;a href=&#34;http://www.sqlalchemy.org/&#34;&gt;SQLAlchemy&lt;/a&gt; ORM. SQLAlchemy lets you treat database entries as python objects. This allows you to keep your mental focus on Python code, rather than bouncing back and forth between SQL queries and Python.&lt;/p&gt;

&lt;h2 id=&#34;handling-data-on-the-back-end:0eab5b6ef5fc6b3a1fc2a55d8d118484&#34;&gt;Handling data on the back end&lt;/h2&gt;

&lt;p&gt;Inscribe&amp;rsquo;s back end handled a variety of data operations including user login sessions, assignment data, grades, and rubrics. User authentication was handled through &lt;a href=&#34;https://self-issued.info/docs/draft-ietf-oauth-json-web-token.html&#34;&gt;JSON Web Tokens&lt;/a&gt; (JWT) sent over a HTTP header and saved client side into a cookie. I chose to use JWT over other authentication methods, since it&amp;rsquo;s a language agnostic specification that is robust and secure. When a user tried to update or create data the back end could check their JWT and make sure that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they are a valid user&lt;/li&gt;
&lt;li&gt;they have permission to create or edit the data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Student accounts for Inscribe were free, but teachers were required to pay a monthly fee. Rather than charge teacher credit cards directly, I chose to use &lt;a href=&#34;https://stripe.com/&#34;&gt;Stripe&lt;/a&gt; to handle all payment processing. Credit card numbers we sent directly to Stripe servers from the browser. Stripe then returned a token that could be used to make a charge to the teacher&amp;rsquo;s card from the Inscribe back end. While this is a bit of extra coding up front, it removed all the extra security hassle that comes with handling credit card numbers directly.&lt;/p&gt;

&lt;h2 id=&#34;figuring-out-the-front-end:0eab5b6ef5fc6b3a1fc2a55d8d118484&#34;&gt;Figuring out the front end&lt;/h2&gt;

&lt;p&gt;The front end of Inscribe went through several architecture iterations. Initially I built the front end for Inscribe using &lt;a href=&#34;http://jinja.pocoo.org/docs/dev/&#34;&gt;Jinja2 templates&lt;/a&gt; and &lt;a href=&#34;https://jquery.com/&#34;&gt;JQuery&lt;/a&gt;. When a browser requested a page, the back end would load the proper data for a page from the database and generate the HTML based on that page&amp;rsquo;s template file. This method worked quite well initially. However, as the site grew and the features became more complex, organizing both the code and the pages became complicated. After researching different solutions and consulting with the rest of Pomegranate Lab, I chose AngularJS for the next iteration of Inscribe&amp;rsquo;s front end.&lt;/p&gt;

&lt;p&gt;The main feature that drew me to AngularJS&amp;rsquo;s is its two-way data binding. Two-way data binding makes it very easy to implement features in AngularJS that would have been fairly complicated to do with just JQuery. After only a couple of weeks rewriting Inscribe, the new AngularJS version was at feature parity with the old JQuery version. Additionally, rewriting the front end allowed me to simplify the back end. No longer would the back end have to fetch data and render each page. Now the back end was, for the most part, a collection of REST API endpoints.&lt;/p&gt;

&lt;h2 id=&#34;iterate-early-iterate-often:0eab5b6ef5fc6b3a1fc2a55d8d118484&#34;&gt;Iterate early, iterate often&lt;/h2&gt;

&lt;p&gt;Today Inscribe is no longer in use. After extensive user testing, Pomegranate Lab determined that a different approach was needed to help teachers better connect with their students. This project later iterated into &lt;a href=&#34;//jwsonic.github.io/projects/playbook/&#34;&gt;The Playbook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When it was around, Inscribe looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//jwsonic.github.io/img/inscribe-combined.png&#34; alt=&#34;Inscribe Img&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>